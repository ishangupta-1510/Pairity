name: Testing Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'
  RUBY_VERSION: '3.0'

jobs:
  lint-and-typecheck:
    name: Lint and TypeScript
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Run ESLint
        run: |
          cd pairity-app
          npm run lint
          
      - name: Run TypeScript check
        run: |
          cd pairity-app
          npm run type-check
          
      - name: Check code formatting
        run: |
          cd pairity-app
          npm run format:check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Run unit tests
        run: |
          cd pairity-app
          npm test -- --coverage --watchAll=false --passWithNoTests
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./pairity-app/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Run component tests
        run: |
          cd pairity-app
          npm test -- --testPathPattern="components" --coverage --watchAll=false
          
      - name: Upload component test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: component-test-results
          path: pairity-app/test-results/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Run integration tests
        run: |
          cd pairity-app
          npm test -- --testPathPattern="integration" --coverage --watchAll=false
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: pairity-app/test-results/

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Run accessibility tests
        run: |
          cd pairity-app
          npm test -- --testPathPattern="accessibility" --coverage --watchAll=false
          
      - name: Generate accessibility report
        run: |
          cd pairity-app
          npm run test:accessibility:report
          
      - name: Upload accessibility report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-report
          path: pairity-app/accessibility-report.html

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Run performance tests
        run: |
          cd pairity-app
          npm run test:performance
          
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-report
          path: pairity-app/performance-report.json

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: pairity-app/ios
          
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Install CocoaPods
        run: |
          cd pairity-app/ios
          pod install
          
      - name: Build iOS app
        run: |
          cd pairity-app
          npx react-native build-ios --mode=Debug

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Build Android app
        run: |
          cd pairity-app/android
          ./gradlew assembleDebug
          
      - name: Upload Android APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: pairity-app/android/app/build/outputs/apk/debug/

  e2e-tests-ios:
    name: E2E Tests (iOS)
    runs-on: macos-latest
    needs: [build-ios]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Install Detox CLI
        run: npm install -g detox-cli
        
      - name: Build app for Detox
        run: |
          cd pairity-app
          detox build --configuration ios.sim.debug
          
      - name: Run E2E tests
        run: |
          cd pairity-app
          detox test --configuration ios.sim.debug --cleanup
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-ios
          path: pairity-app/e2e/test-results/

  e2e-tests-android:
    name: E2E Tests (Android)
    runs-on: ubuntu-latest
    needs: [build-android]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Install Detox CLI
        run: npm install -g detox-cli
        
      - name: Build app for Detox
        run: |
          cd pairity-app
          detox build --configuration android.emu.debug
          
      - name: Start Android Emulator
        run: |
          echo "no" | avdmanager create avd --force -n test -k "system-images;android-29;google_apis;x86"
          $ANDROID_HOME/emulator/emulator -avd test -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim &
          adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
          
      - name: Run E2E tests
        run: |
          cd pairity-app
          detox test --configuration android.emu.debug --cleanup
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-android
          path: pairity-app/e2e/test-results/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pairity-app/package-lock.json
          
      - name: Install dependencies
        run: |
          cd pairity-app
          npm ci
          
      - name: Run npm audit
        run: |
          cd pairity-app
          npm audit --audit-level moderate
          
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, typescript

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, component-tests, integration-tests, accessibility-tests, performance-tests, e2e-tests-ios, e2e-tests-android]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate combined test report
        run: |
          echo "# Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Unit Tests" >> test-summary.md
          echo "- Status: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Component Tests" >> test-summary.md
          echo "- Status: ${{ needs.component-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Integration Tests" >> test-summary.md
          echo "- Status: ${{ needs.integration-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Accessibility Tests" >> test-summary.md
          echo "- Status: ${{ needs.accessibility-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Performance Tests" >> test-summary.md
          echo "- Status: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## E2E Tests (iOS)" >> test-summary.md
          echo "- Status: ${{ needs.e2e-tests-ios.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## E2E Tests (Android)" >> test-summary.md
          echo "- Status: ${{ needs.e2e-tests-android.result }}" >> test-summary.md
          
      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md
          
      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const testSummary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, component-tests, integration-tests, accessibility-tests, build-ios, build-android, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Check all tests passed
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" != "success" || 
                "${{ needs.unit-tests.result }}" != "success" || 
                "${{ needs.component-tests.result }}" != "success" || 
                "${{ needs.integration-tests.result }}" != "success" || 
                "${{ needs.accessibility-tests.result }}" != "success" || 
                "${{ needs.build-ios.result }}" != "success" || 
                "${{ needs.build-android.result }}" != "success" || 
                "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "❌ Some tests failed. Deployment is not ready."
            exit 1
          else
            echo "✅ All tests passed. Ready for deployment!"
          fi
          
      - name: Notify deployment readiness
        if: success()
        run: |
          echo "🚀 All checks passed! The application is ready for deployment."